module StockPosition where

data ProposeTransferReturn = ProposeTransferReturn
  with
    transferProposal: ContractId StockTransferProposal
    originalStockPosition: Optional(ContractId StockPosition)

template StockPosition
  with
    fairmint: Party
    issuer: Party
    owner: Party
    quantity: Int
    -- TODO add reference to the stock class
  where
    signatory owner, issuer, fairmint
  
    ensure
      quantity > 0
    
    choice ProposeTransfer : ProposeTransferReturn
      with
        recipient: Party
        quantityToTransfer: Int
      controller owner
      do
        assertMsg "Cannot transfer to self" (recipient /= owner)

        -- Create a proposal
        transferProposal <- create StockTransferProposal with
          fairmint = fairmint
          issuer = issuer
          owner = owner
          recipient = recipient
          quantity = quantityToTransfer
        
        -- Update this position
        if quantityToTransfer < quantity then do
          originalStockPosition <- create this with
            quantity = quantity - quantityToTransfer
          return ProposeTransferReturn{transferProposal, originalStockPosition=Some originalStockPosition}
        else
          return ProposeTransferReturn{transferProposal, originalStockPosition=None}

template StockTransferProposal
  with
    fairmint: Party
    issuer: Party
    owner: Party
    recipient: Party
    quantity: Int
  where
    signatory issuer, fairmint, owner
    observer recipient

    ensure 
      quantity > 0

    choice AcceptTransfer : ContractId StockPosition
      controller recipient
      do
        -- TODO merge positions when transferring after multiple transfers to the same recipient
        -- Create a new position for the recipient
        create StockPosition with
          fairmint = fairmint
          issuer = issuer
          owner = recipient
          quantity = quantity

    -- TODO withdraw transfer (and merge positions if needed)
        