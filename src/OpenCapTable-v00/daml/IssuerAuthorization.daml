module IssuerAuthorization where

import Issuer
import Splice.AmuletRules
import Splice.Util

template IssuerAuthorization
  with
    fairmint: Party
    issuer: Party
  where
    signatory fairmint
    observer issuer

    choice CreateIssuer: ContractId Issuer
      with
        name: Text
        authorizedShares: Int
      controller issuer
      do
        create Issuer
          with
            fairmint = fairmint
            issuer = issuer
            name = name
            authorizedShares = authorizedShares
            issuedShares = 0

    -- | Creates an Issuer contract after charging a fee in Canton Coin (Amulet) to the issuer.
    choice PayFeeAndCreateIssuer: ContractId Issuer
      with
        name: Text
        authorizedShares: Int
        feeAmount: Decimal
        inputs: [TransferInput]
        context: PaymentTransferContext
        walletProvider: Party
      controller issuer
      do
        -- Validate that the fee amount is positive
        require "Fee amount must be positive" (feeAmount > 0.0)
        
        -- Create a direct transfer to pay the fee to fairmint
        let transfer = Transfer with
              sender = issuer
              provider = walletProvider
              inputs = inputs
              outputs = [ TransferOutput with
                  receiver = fairmint
                  amount = feeAmount
                  receiverFeeRatio = 0.0
                  lock = None ]
              beneficiaries = None
        
        -- Execute the transfer to pay the fee
        transferResult <- exercisePaymentTransfer context transfer
        
        -- Create the Issuer contract after successful payment
        issuerCid <- create Issuer
          with
            fairmint = fairmint
            issuer = issuer
            name = name
            authorizedShares = authorizedShares
            issuedShares = 0
        
        pure issuerCid

