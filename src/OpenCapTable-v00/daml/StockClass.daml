module StockClass where

import StockPosition
import StockClassType

template StockClass
  with
    fairmint: Party
    issuer: Party
    stockClassType: StockClassType
    authorizedShares: Int
    issuedShares: Int
  where
    signatory issuer, fairmint

    ensure 
      authorizedShares > 0
      && issuedShares >= 0
      && issuedShares <= authorizedShares

    choice ProposeIssueStock : (ContractId IssueStockClassProposal, ContractId StockClass)
      with
        recipient : Party
        quantity : Int
      controller issuer
      do
        issueStockClassProposal <- create IssueStockClassProposal with
          fairmint = fairmint
          issuer = issuer
          recipient = recipient
          quantity = quantity

        stockClass <- create this with
          issuedShares = issuedShares + quantity

        return (issueStockClassProposal, stockClass)

template IssueStockClassProposal
  with
    fairmint: Party
    issuer: Party
    recipient: Party
    quantity: Int
  where
    signatory fairmint, issuer
    observer recipient

    ensure 
      quantity > 0

    choice AcceptIssueStockProposal : ContractId StockPosition
      controller recipient
      do
        -- TODO merge positions when issuing after multiple issues to the same owner
        create StockPosition with
          fairmint = fairmint
          issuer = issuer
          owner = recipient
          quantity = quantity
          -- TODO add reference to the stock class (stockClassType)

    -- TODO withdraw transfer (and merge positions if needed)
