module TestCreateIssuer where

import Setup
import Issuer
import Daml.Script
import DA.Optional

-- Happy Case --

happyCase = script do
  TestUsers{fairmint, issuer, rando} <- setupUsers
  issuerCid <- createIssuer fairmint issuer

  -- Fairmint can read
  issuerContract <- queryContractId fairmint issuerCid
  assertMsg "Issuer contract not found" (isSome issuerContract)

  -- Issuer can read
  issuerContract <- queryContractId issuer issuerCid
  assertMsg "Issuer contract not found" (isSome issuerContract)

  -- Rando cannot read
  issuerContract <- queryContractId rando issuerCid
  assertMsg "Rando should not see issuer contract" (isNone issuerContract)

  pure()

-- Ensures --

nameCannotBeEmpty = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMultiMustFail [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = ""
    authorizedShares = 1000
    issuedShares = 0

authorizedSharesRequired = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMultiMustFail [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = "TestIssuer"
    authorizedShares = 0
    issuedShares = 0

authorizedSharesCannotBeNegative = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMultiMustFail [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = "TestIssuer"
    authorizedShares = -1000
    issuedShares = 0

issuedSharesCannotBeNegative = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMultiMustFail [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = "TestIssuer"
    authorizedShares = 1000
    issuedShares = -1

issuedSharesCanByZero = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMulti [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = "TestIssuer"
    authorizedShares = 1000
    issuedShares = 0

issuedSharesCannotExceedAuthorized = script do
  TestUsers{fairmint, issuer} <- setupUsers

  submitMultiMustFail [fairmint, issuer] [] $ createCmd Issuer with
    fairmint = fairmint
    issuer = issuer
    name = "TestIssuer"
    authorizedShares = 1000
    issuedShares = 1001

-- Archiving --

issuerCannotArchive = script do
  TestUsers{fairmint, issuer} <- setupUsers
  issuerCid <- createIssuer fairmint issuer

  submitMustFail issuer $ archiveCmd issuerCid

fairmintCannotArchive = script do
  TestUsers{fairmint, issuer} <- setupUsers
  issuerCid <- createIssuer fairmint issuer

  submitMustFail fairmint $ archiveCmd issuerCid

issuerAndFairmintCanArchive = script do
  TestUsers{fairmint, issuer} <- setupUsers
  issuerCid <- createIssuer fairmint issuer

  submitMulti [fairmint, issuer] [] $ archiveCmd issuerCid
