module Demo where

import Daml.Script
import Setup
import FairmintAdminService
import Issuer
import IssuerAuthorization
import StockClass
import StockPosition
import StockClassType(StockClassType(Common))

-- The goal as described by Thibauld:
-- 1. We create the issuer "Acme Inc" with 15M authorized shares
-- 2. We create a stockclass "Common" (for common shares) with 10M authorized shares (of this class)
-- 3. We create 2 stakeholders: "John Bob" and "Jim Alice"
-- 4. We issue 10M common shares to Bob
-- 5. Bob transfers 2M common shares to Alice

testDemo = script do
  -- Pre-req: create parties (more can be added anytime)
  TestUsers{fairmint, issuer, alice, bob, rando} <- setupUsers

  -- Pre-req: deploy FairmintAdminService (this is not strictly required ATM)
  fairmintAdminServiceCid <- submit fairmint do
    createCmd FairmintAdminService
      with
        fairmint = fairmint

  -- 1.1: Fairmint authorizes Alice as a new issuer
  issuerAuthorizationCid <- submit fairmint do
    exerciseCmd fairmintAdminServiceCid AuthorizeIssuer
      with
        issuer = issuer

  -- 1.2: Issuer accepts authorization
  issuerCid <- submit issuer do
    exerciseCmd issuerAuthorizationCid CreateIssuer
      with
        name = "Acme Inc"
        authorizedShares = 15_000_000

  -- 2.1: Issuer creates stockclass "Common" with 10M authorized shares
  (commonStockClassCid, _) <- submit issuer do
    exerciseCmd issuerCid CreateStockClass
      with
        stockClassType = StockClassType.Common
        shares = 10_000_000

  -- 4.1: Issuer proposes 10M common shares to Bob
  (bobIssueStockClassProposalCid, _) <- submit issuer do
    exerciseCmd commonStockClassCid ProposeIssueStock
      with
        recipient = bob
        quantity = 10_000_000

  -- 4.2: Bob accepts the proposal and receives shares
  bobStockPositionCid <- submit bob do
    exerciseCmd bobIssueStockClassProposalCid AcceptIssueStockProposal

  -- 5.1: Bob proposes 2M common share transfer to Alice
  proposeTransferReturn <- submit bob do
    exerciseCmd bobStockPositionCid ProposeTransfer
      with
        recipient = alice
        quantityToTransfer = 2_000_000

  -- 5.2: Alice accepts the transfer proposal and receives shares
  aliceStockPositionCid <- submit alice do
    exerciseCmd proposeTransferReturn.transferProposal AcceptTransfer

  pure()
